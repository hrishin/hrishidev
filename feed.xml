<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-26T04:13:25+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cognitive Perception</title><subtitle>Kubernetes and containers, Distributed systems, Cloud computing, Unix/Linux systems,  Data structures and algorithms.</subtitle><entry><title type="html">Unit test client-go watch API to mock the watch events in Kubernetes</title><link href="http://localhost:4000/kubernetes,/client-go/2020/11/24/mock-the-watch-api.html" rel="alternate" type="text/html" title="Unit test client-go watch API to mock the watch events in Kubernetes" /><published>2020-11-24T21:00:12+00:00</published><updated>2020-11-24T21:00:12+00:00</updated><id>http://localhost:4000/kubernetes,/client-go/2020/11/24/mock-the-watch-api</id><content type="html" xml:base="http://localhost:4000/kubernetes,/client-go/2020/11/24/mock-the-watch-api.html">&lt;h1 id=&quot;unit-test-client-go-watch-api-to-mock-the-watch-events-using-client-go-testing-package&quot;&gt;Unit test client-go watch API to mock the watch events using client-go testing package&lt;/h1&gt;

&lt;p&gt;Sometimes we encounter the case where we need to simulate the watch events in 
order to test code that uses client-go &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; API in the Kubernetes world.&lt;/p&gt;

&lt;p&gt;In this example, we will see how to mock &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; API events sequence as part of the unit testing.&lt;/p&gt;

&lt;p&gt;Before that, let’s see how to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fake&lt;/code&gt; package to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; APIs.&lt;/p&gt;

&lt;p&gt;In this case, we will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod()&lt;/code&gt; API. You can find the complete example at &lt;a href=&quot;https://github.com/hrishin/k8s-client-go-examples/tree/main/examples/mock-watch-events&quot;&gt;https://github.com/hrishin/k8s-client-go-examples/tree/main/examples/mock-watch-events&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-get-pod-by-name&quot;&gt;Test get pod by name&lt;/h2&gt;

&lt;p&gt;Following snippet initialise the fake client by feeding a  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; resource.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import(
	v1 &quot;k8s.io/api/core/v1&quot;
	metav1 &quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;
	&quot;k8s.io/client-go/kubernetes/fake&quot;
)

client := fake.NewSimpleClientset(&amp;amp;v1.Pod{
	ObjectMeta: metav1.ObjectMeta{
		Name:      &quot;fake&quot;,
		Namespace: &quot;fake&quot;,
	},
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test it by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make test-get-pod&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  mock-watch-events git:(mock-watch) ✗ make test-get-pod
go test -run Test_get_pod_using_fake_client -v
=== RUN   Test_get_pod_using_fake_client
    fake_client_test.go:28: Fetch the pod by pod name using the client-go API 
    fake_client_test.go:31: 	Test 0: checking the error code response
    fake_client_test.go:36: 	✓	client go has return no error.
    fake_client_test.go:39: 	Test 1: verifying the retrived pod from client-go get pod API
    fake_client_test.go:44: 	✓	client go has returned the expected pod
--- PASS: Test_get_pod_using_fake_client (0.00s)
PASS
ok  	github.com/hrishin/k8s-client-go-examples/examples/mock-watch-events	0.571s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;test-pod-watch-events-mocking&quot;&gt;Test pod watch events mocking&lt;/h1&gt;

&lt;p&gt;In this senario, we will simulate pod life cycle events i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod.status.phase&lt;/code&gt; -&amp;gt; {PodPending,  PodUnknown, PodRunning}.
Usually, we encounter such code to wait for the pod to become up &amp;amp; running.&lt;/p&gt;

&lt;p&gt;To feed such events &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; provides the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt; package. Following example snippet to feed the mock events for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; API.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clients := fake.NewSimpleClientset()
watcher := watch.NewFake()
clients.PrependWatchReactor(&quot;pods&quot;, k8stest.DefaultWatchReactor(watcher, nil))

go func() {
	defer watcher.Stop()

	for i, _ := range pods {
		time.Sleep(300 * time.Millisecond)
		watcher.Add(&amp;amp;v1.Pod{
		   ..... // your pod definitions
		})
	}
}()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Important to note here that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clients.PrependWatchReactor(&quot;pods&quot;, k8stest.DefaultWatchReactor(watcher, nil))&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pods&lt;/code&gt; is the plural resource name. Giving the wrong resource name would fail mocking watch events. One of the way to get the resource name is using&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl api-resources | grep -i pod

NAME  SHORTNAMES APIGROUP NAMESPACED KIND
pods  po  				  true 		 Pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the example by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make test-watch-pod&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  mock-watch-events git:(mock-watch) ✗ make test-watch-pod
go test -run Test_watch_pod_using_fake_client -v
=== RUN   Test_watch_pod_using_fake_client
    fake_client_test.go:91: Watch pod updates by pod name using the client-go API 
    fake_client_test.go:97:     Test 0: checking the error code response
    fake_client_test.go:102:    ✓       client go has return no error.
    fake_client_test.go:105:    Test 1: checking watch event updates
    fake_client_test.go:115:    ✓       got a pod update event
    fake_client_test.go:122:    ✓       expecting pod phase Pending and got Pending
    fake_client_test.go:115:    ✓       got a pod update event
    fake_client_test.go:122:    ✓       expecting pod phase Unknown and got Unknown
    fake_client_test.go:115:    ✓       got a pod update event
    fake_client_test.go:122:    ✓       expecting pod phase Running and got Running
--- PASS: Test_watch_pod_using_fake_client (0.91s)
PASS
ok      github.com/hrishin/k8s-client-go-examples/examples/mock-watch-events    1.490s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope this post will be useful. Would like to hear your reviews, feedback or your experience. 
Happy programming with Kubernetes!&lt;/p&gt;</content><author><name></name></author><category term="kubernetes," /><category term="client-go" /><summary type="html">Unit test client-go watch API to mock the watch events using client-go testing package</summary></entry><entry><title type="html">Examples of using Kubernetes client-go</title><link href="http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples.html" rel="alternate" type="text/html" title="Examples of using Kubernetes client-go" /><published>2020-11-24T15:00:12+00:00</published><updated>2020-11-24T15:00:12+00:00</updated><id>http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples</id><content type="html" xml:base="http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples.html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;One of the beuty of the &lt;strong&gt;Kubernetes&lt;/strong&gt; is its &lt;em&gt;extensiblity&lt;/em&gt;. Just like Kubernetes provide the 
Resources/Objects such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deployment, StatefulSet, Pod, Service&lt;/code&gt; etc to run the application workloads. It allows defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Custome Resources&lt;/code&gt; to implement the custom tailor workloads. e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipelines&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; resources to create CI/CD pipeline workloads. That’s &lt;em&gt;extensibility&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In order to work with resources Kubernetes community provides a awesome  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; library. It provides the collection of methods()/APIS() for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Golang&lt;/code&gt; to perform certain  operations on resources such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get/list&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;and so on. So one can use the Kuberrnetes HTTP APIS to orchestrate
certain workflow for automating repetative mundane things.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One of the challenge &lt;strong&gt;sometimes&lt;/strong&gt; I feel using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; is to undersand the API usage &lt;a href=&quot;https://godoc.org/k8s.io/client-go&quot;&gt;documentation&lt;/a&gt; and examples. Or often time I need to take a reference of old code to recall the usage.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Examples: how to load the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./kube/config&lt;/code&gt;, fetch the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namesapce&lt;/code&gt; or current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;, use the fake client then mock the watch API
to unit tets the code.&lt;/p&gt;

&lt;p&gt;Hence to overcome this challenge I’ve started documenting examples to demonstartes API’s usage with their options.
A collection small programs and easy to   refer.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;One can find all examples at &lt;a href=&quot;https://github.com/hrishin/k8s-client-go-examples&quot;&gt;https://github.com/hrishin/k8s-client-go-examples&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="kubernetes," /><category term="client-go" /><summary type="html">Background</summary></entry><entry><title type="html">Generic Linked List implementation in C</title><link href="http://localhost:4000/linked/list,/linux/2020/11/20/generic-linkedin-list-c.html" rel="alternate" type="text/html" title="Generic Linked List implementation in C" /><published>2020-11-20T22:12:12+00:00</published><updated>2020-11-20T22:12:12+00:00</updated><id>http://localhost:4000/linked/list,/linux/2020/11/20/generic-linkedin-list-c</id><content type="html" xml:base="http://localhost:4000/linked/list,/linux/2020/11/20/generic-linkedin-list-c.html">&lt;p&gt;Linked &amp;lt;- - -&amp;gt; List is one of the most widely used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data structure&lt;/code&gt; in the Linux system implementation. It holds special importance in the process scheduling.&lt;/p&gt;

&lt;p&gt;We will discuss how Linux use generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linked List&lt;/code&gt; and optimise the process
scheduling given the nature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linked List&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this post we will demistify how Doubley Circular Linked list is implemented in the
Linux Kernel and how scheduler has optimised Run Queue.&lt;/p&gt;

&lt;p&gt;[WIP]&lt;/p&gt;</content><author><name></name></author><category term="linked" /><category term="list," /><category term="linux" /><summary type="html">Linked &amp;lt;- - -&amp;gt; List is one of the most widely used data structure in the Linux system implementation. It holds special importance in the process scheduling.</summary></entry></feed>