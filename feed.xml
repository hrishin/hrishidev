<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-08T21:15:17+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cognitive Perception</title><subtitle>Kubernetes and containers, Distributed systems, Cloud computing, Unix/Linux systems,  Data structures and algorithms.</subtitle><entry><title type="html">Unit test client-go watch API to mock the watch events in Kubernetes</title><link href="http://localhost:4000/kubernetes,/client-go/2020/11/24/mock-the-watch-api.html" rel="alternate" type="text/html" title="Unit test client-go watch API to mock the watch events in Kubernetes" /><published>2020-11-24T21:00:12+00:00</published><updated>2020-11-24T21:00:12+00:00</updated><id>http://localhost:4000/kubernetes,/client-go/2020/11/24/mock-the-watch-api</id><content type="html" xml:base="http://localhost:4000/kubernetes,/client-go/2020/11/24/mock-the-watch-api.html">&lt;h1 id=&quot;unit-test-client-go-watch-api-to-mock-the-watch-events-using-client-go-testing-package&quot;&gt;Unit test client-go watch API to mock the watch events using client-go testing package&lt;/h1&gt;

&lt;p&gt;Sometimes we encounter the case where we need to simulate the watch events in 
order to test code that uses client-go &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; API in the Kubernetes world.&lt;/p&gt;

&lt;p&gt;In this example, we will see how to mock &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; API events sequence as part of the unit testing.&lt;/p&gt;

&lt;p&gt;Before that, let’s see how to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fake&lt;/code&gt; package to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; APIs.&lt;/p&gt;

&lt;p&gt;In this case, we will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod()&lt;/code&gt; API. You can find the complete example at &lt;a href=&quot;https://github.com/hrishin/k8s-client-go-examples/tree/main/examples/mock-watch-events&quot;&gt;https://github.com/hrishin/k8s-client-go-examples/tree/main/examples/mock-watch-events&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-get-pod-by-name&quot;&gt;Test get pod by name&lt;/h2&gt;

&lt;p&gt;The following snippet initialize the fake client by feeding a  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; resource.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import(
	v1 &quot;k8s.io/api/core/v1&quot;
	metav1 &quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;
	&quot;k8s.io/client-go/kubernetes/fake&quot;
)

client := fake.NewSimpleClientset(&amp;amp;v1.Pod{
	ObjectMeta: metav1.ObjectMeta{
		Name:      &quot;fake&quot;,
		Namespace: &quot;fake&quot;,
	},
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test it by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make test-get-pod&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  mock-watch-events git:(mock-watch) ✗ make test-get-pod
go test -run Test_get_pod_using_fake_client -v
=== RUN   Test_get_pod_using_fake_client
    fake_client_test.go:28: Fetch the pod by pod name using the client-go API 
    fake_client_test.go:31: 	Test 0: checking the error code response
    fake_client_test.go:36: 	✓	client go has return no error.
    fake_client_test.go:39: 	Test 1: verifying the retrived pod from client-go get pod API
    fake_client_test.go:44: 	✓	client go has returned the expected pod
--- PASS: Test_get_pod_using_fake_client (0.00s)
PASS
ok  	github.com/hrishin/k8s-client-go-examples/examples/mock-watch-events	0.571s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;test-pod-watch-events-mocking&quot;&gt;Test pod watch events mocking&lt;/h1&gt;

&lt;p&gt;In this scenario, we will simulate pod life cycle events i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod.status.phase&lt;/code&gt; -&amp;gt; {PodPending,  PodUnknown, PodRunning}.
Usually, we encounter such code to wait for the pod to become up &amp;amp; running.&lt;/p&gt;

&lt;p&gt;To feed such events &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; provides the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt; package. Following example snippet to feed the mock events for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; API.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clients := fake.NewSimpleClientset()
watcher := watch.NewFake()
clients.PrependWatchReactor(&quot;pods&quot;, k8stest.DefaultWatchReactor(watcher, nil))

go func() {
	defer watcher.Stop()

	for i, _ := range pods {
		time.Sleep(300 * time.Millisecond)
		watcher.Add(&amp;amp;v1.Pod{
		   ..... // your pod definitions
		})
	}
}()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Important to note here that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clients.PrependWatchReactor(&quot;pods&quot;, k8stest.DefaultWatchReactor(watcher, nil))&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pods&lt;/code&gt; is the plural resource name. Giving the wrong resource name would fail mocking watch events. One of the way to get the resource name is using&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl api-resources | grep -i pod

NAME  SHORTNAMES APIGROUP NAMESPACED KIND
pods  po  				  true 		 Pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the example by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make test-watch-pod&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  mock-watch-events git:(mock-watch) ✗ make test-watch-pod
go test -run Test_watch_pod_using_fake_client -v
=== RUN   Test_watch_pod_using_fake_client
    fake_client_test.go:91: Watch pod updates by pod name using the client-go API 
    fake_client_test.go:97:     Test 0: checking the error code response
    fake_client_test.go:102:    ✓       client go has return no error.
    fake_client_test.go:105:    Test 1: checking watch event updates
    fake_client_test.go:115:    ✓       got a pod update event
    fake_client_test.go:122:    ✓       expecting pod phase Pending and got Pending
    fake_client_test.go:115:    ✓       got a pod update event
    fake_client_test.go:122:    ✓       expecting pod phase Unknown and got Unknown
    fake_client_test.go:115:    ✓       got a pod update event
    fake_client_test.go:122:    ✓       expecting pod phase Running and got Running
--- PASS: Test_watch_pod_using_fake_client (0.91s)
PASS
ok      github.com/hrishin/k8s-client-go-examples/examples/mock-watch-events    1.490s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope this post will be useful. Would like to hear your reviews, feedback or your experience. 
Happy programming with Kubernetes!&lt;/p&gt;</content><author><name></name></author><category term="Kubernetes," /><category term="client-go" /><summary type="html">Unit test client-go watch API to mock the watch events using client-go testing package</summary></entry><entry><title type="html">Examples of using Kubernetes client-go</title><link href="http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples.html" rel="alternate" type="text/html" title="Examples of using Kubernetes client-go" /><published>2020-11-24T15:00:12+00:00</published><updated>2020-11-24T15:00:12+00:00</updated><id>http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples</id><content type="html" xml:base="http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples.html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;One of the beauty of the &lt;strong&gt;Kubernetes&lt;/strong&gt; is its &lt;em&gt;extensiblity&lt;/em&gt;. Just like Kubernetes provide the 
Resources/Objects like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deployment, StatefulSet, Pod, Service&lt;/code&gt; etc to run the application workloads, it allows defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Custome Resources&lt;/code&gt; to define the custom tailer workloads. e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipelines&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; resources to create CI/CD pipeline workloads. That’s &lt;em&gt;extensibility&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In order to work with resources Kubernetes community provides a awesome  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; library. It provides the collection of methods()/APIS() for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Golang&lt;/code&gt; to perform certain  operations on resources such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get/list&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; and so on. So one can use the Kubernetes HTTP APIS to orchestrate
certain workflow for automating repetitive mundane things.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One of the challenge sometimes I feel using cleint-go is lack of API usage documentation or examples&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hence I to overcome this challenge I’ve started documenting examples of frequently used API’ and their options.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;One can find all examples at &lt;a href=&quot;https://github.com/hrishin/k8s-client-go-examples&quot;&gt;https://github.com/hrishin/k8s-client-go-examples&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="kubernetes," /><category term="client-go" /><summary type="html">Background</summary></entry><entry><title type="html">How Linux Kernel implements generic linked list: part 1</title><link href="http://localhost:4000/linked/list,/linux,/linux/kernel/list/2020/11/20/generic-linkedin-list-c.html" rel="alternate" type="text/html" title="How Linux Kernel implements generic linked list: part 1" /><published>2020-11-20T22:12:12+00:00</published><updated>2020-11-20T22:12:12+00:00</updated><id>http://localhost:4000/linked/list,/linux,/linux/kernel/list/2020/11/20/generic-linkedin-list-c</id><content type="html" xml:base="http://localhost:4000/linked/list,/linux,/linux/kernel/list/2020/11/20/generic-linkedin-list-c.html">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circular Doubly  Linked List&lt;/code&gt; &amp;lt;- - -&amp;gt; is one of the most widely used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data structure&lt;/code&gt; in the Linux system implementation. It holds importance in the scheduling of the processes(RunQueue),  the buffers cache, device driver implementation, and so on.&lt;/p&gt;

&lt;p&gt;This is a 3 part series.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In the 1st part, we will take a look at building blocks of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular doubly  linked list&lt;/code&gt; in the Linux kernel.&lt;/li&gt;
  &lt;li&gt;The 2nd part will focus on implementing the basic list routines and implement the complete routine.&lt;/li&gt;
  &lt;li&gt;The 3rd part will focus on why generic list implementation is inevitably important in the process scheduling context, hence it would help in appreciating how such implementation help in optimising the process scheduling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;assumptions-and-notes&quot;&gt;Assumptions and notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Understands the basics of linked list data structure.&lt;/li&gt;
  &lt;li&gt;For the intent of the learning, the majority of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; code snippets in this post is not following the Linux code style guide.&lt;/li&gt;
  &lt;li&gt;Good grasp on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; pointers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-generic-linked-list&quot;&gt;Why generic linked list?&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linked list&lt;/code&gt; is quite a common data structure used through out the Linux implementation. Let’s take a look at the simple search result in the &lt;a href=&quot;https://github.com/torvalds/linux/search?q=INIT_LIST_HEAD&quot;&gt;Linux kernel source code&lt;/a&gt; which initialize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linked list&lt;/code&gt;. Over the period, Linux community has implemented unified and generic API’s hence the code duplication can be reduced.
Overall &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linked list&lt;/code&gt; has a finite set of routines such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_entry&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_entry&lt;/code&gt; and more in the Linux context. Hence it makes sense to generalize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linked list&lt;/code&gt; implementation while the data type it holds varies.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-fundamental-problem-with-the-concrete-type-approach&quot;&gt;What’s the fundamental problem with the concrete type approach?&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt; structure; it’s tightly bind &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;links&lt;/code&gt; fields together.&lt;/p&gt;

&lt;p&gt;Example: Let’s consider the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt; structure of rudimentary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linked list&lt;/code&gt; which holds the process list of the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt;.
For a simplicity, I’ve dropped the other details from the real &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt; structure.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//data properties&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//link properties&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pointers to the structure of concrete type task_t&lt;/code&gt;. Hence it could not point to the data of any other type.&lt;/p&gt;

&lt;p&gt;Hence in order to make the list implementation generic, link pointers needs to be independent of data type it points to.&lt;/p&gt;

&lt;h2 id=&quot;solution-separate-the-links-from-the-structure-implementation&quot;&gt;Solution: Separate the links from the structure implementation&lt;/h2&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hence &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linked list&lt;/code&gt; could be formed in the following way. Its generic enough now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/list_part1_1.PNG&quot; alt=&quot;basic list head&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-whats-the-use-of-such-structure-and-how-to-associate-the-data-types&quot;&gt;Problem: What’s the use of such structure and how to associate the data types?&lt;/h2&gt;

&lt;p&gt;What if a structure embed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list_head&lt;/code&gt; as a field of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type struct&lt;/code&gt;? In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt; it would look like:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/list_part1_2.PNG&quot; alt=&quot;task_t list illustration and memory layout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then despite this how to get the handle of the data type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;solution-calculate-the-offset-of-list_headnext-to-trace-back-the-base-address-of-the-struct&quot;&gt;Solution: Calculate the offset of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list_head.next&lt;/code&gt; to trace back the base address of the struct&lt;/h2&gt;

&lt;p&gt;The entry in the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt; is a structure. Hence memory allocated to fields of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt; is contiguous. 
Then, how about calculating the memory offset of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasks.next&lt;/code&gt;( or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasks&lt;/code&gt;) and tracing back the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base address&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt; data to which this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasks.next&lt;/code&gt; associated with?&lt;/p&gt;

&lt;p&gt;The following example demonstrates the calculating offset of any field relative to its structure.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// offset.c&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define OFFSET_OF(T, x) (unsigned long int) ((&amp;amp;(((T*)0) -&amp;gt; x))) //the macro calculate the offset of field x with respect to struct T
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;off_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_OF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;off_tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_OF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task_t.pid offset    %li&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task_t.tasks.next offset  %li&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; offset offset.c
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./offset              
  task_t.pid offset    0
  task_t.tasks offset  16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following example illustrate how address are assigned to the field.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//address.c&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lu size pid&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lu size prev&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lu size next&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%p address of pid&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%p address of prev&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%p address of next&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; address address.c
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./address
  4 size pid
  8 size prev
  8 size next
  140732870370816 address of pid
  140732870370824 address of prev
  140732870370832 address of next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid&lt;/code&gt; field has the size 4 bytes however the next address start after 8 bytes. It’s because the compiler in this case adds the padding of 4 bytes, so the data can be accessed in less number of instructions(internal memory access optimization).&lt;/p&gt;

&lt;p&gt;Now let’s, get the handle to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt; data using one macro called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container_of&lt;/code&gt; by tracing the base address type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_t&lt;/code&gt;. 
The following program illustrates how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTAINER_OF&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OFFSET_OF&lt;/code&gt; macros are used together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// generic_list_node.c

#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

#define OFFSET_OF(T, x) (unsigned long int) ((&amp;amp;(((T*)0) -&amp;gt; x)))
#define CONTAINER_OF(x, T, name) (T*)((((char*)(x)) - OFFSET_OF(T,name)))

struct list_head {
    struct list_head *prev, *next;
};

struct task_t {
    int pid;
    struct list_head tasks;
};

int main() {   
    //~initialize list 
    struct list_head tasks_list; 

    struct task_t t1;
    t1.pid = 1274;

    //~insert node
    tasks_list.next = &amp;amp;t1.tasks;
    tasks_list.prev = &amp;amp;t1.tasks;
    t1.tasks.next = &amp;amp;tasks_list;
    t1.tasks.prev = &amp;amp;tasks_list;
    
    struct task_t *task = CONTAINER_OF(tasks_list.next, struct task_t, tasks);
    printf(&quot;original task address: %p,  retrieved task address: %p\n&quot;, &amp;amp;t1, task);
    
    printf(&quot;pid %d\n&quot;, task -&amp;gt; pid);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; node_access generic_list_node.c
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./node_access              
  original task address: 0x7ffee7dfc5f0, retrieved task address: 0x7ffee7dfc5f0
  pid 1274
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;putting-this-together&quot;&gt;Putting this together&lt;/h2&gt;

&lt;p&gt;This is how the base of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular doubly linked list&lt;/code&gt; is built in the Linux Kernel. Please note that this is still a rudimentary implementation of the Kernel list.
On can refer the actual implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container_of&lt;/code&gt; macro &lt;a href=&quot;https://github.com/torvalds/linux/blob/master/include/linux/kernel.h#L692&quot;&gt;kernel.h&lt;/a&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offsetof&lt;/code&gt; macro &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/source/tools/include/linux/kernel.h#L23&quot;&gt;kernel.h&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next part, let’s use this base then implement basic list routines.&lt;/p&gt;</content><author><name></name></author><category term="linked" /><category term="list," /><category term="Linux," /><category term="Linux" /><category term="kernel" /><category term="list" /><summary type="html">Circular Doubly Linked List &amp;lt;- - -&amp;gt; is one of the most widely used data structure in the Linux system implementation. It holds importance in the scheduling of the processes(RunQueue), the buffers cache, device driver implementation, and so on.</summary></entry></feed>