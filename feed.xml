<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-24T17:25:21+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cognitive Perception</title><subtitle>Kubernetes and containers, Distributed systems, Cloud computing, Unix/Linux systems,  Data structures and algorithms.</subtitle><entry><title type="html">Examples of using Kubernetes client-go</title><link href="http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples.html" rel="alternate" type="text/html" title="Examples of using Kubernetes client-go" /><published>2020-11-24T15:00:12+00:00</published><updated>2020-11-24T15:00:12+00:00</updated><id>http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples</id><content type="html" xml:base="http://localhost:4000/kubernetes,/client-go/2020/11/24/kuernetes-client-go-examples.html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;One of the beuty of the &lt;strong&gt;Kubernetes&lt;/strong&gt; is its &lt;em&gt;extensiblity&lt;/em&gt;. Just like Kubernetes provide the 
Resources/Objects such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deployment, StatefulSet, Pod, Service&lt;/code&gt; etc to run the application workloads. It allows defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Custome Resources&lt;/code&gt; to implement the custom tailor workloads. e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipelines&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; resources to create CI/CD pipeline workloads. That’s &lt;em&gt;extensibility&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In order to work with resources Kubernetes community provides a awesome  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; library. It provides the collection of methods()/APIS() for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Golang&lt;/code&gt; to perform certain  operations on resources such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get/list&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;and so on. So one can use the Kuberrnetes HTTP APIS to orchestrate
certain workflow for automating repetative mundane things.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One of the challenge &lt;strong&gt;sometimes&lt;/strong&gt; I feel using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client-go&lt;/code&gt; is to undersand the API usage &lt;a href=&quot;https://godoc.org/k8s.io/client-go&quot;&gt;documentation&lt;/a&gt; and examples. Or often time I need to take a reference of old code to recall the usage.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Examples: how to load the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./kube/config&lt;/code&gt;, fetch the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namesapce&lt;/code&gt; or current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;, use the fake client then mock the watch API
to unit tets the code.&lt;/p&gt;

&lt;p&gt;Hence to overcome this challenge I’ve started documenting examples to demonstartes API’s usage with their options.
A collection small programs and easy to   refer.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;One can find all examples at &lt;a href=&quot;https://github.com/hrishin/k8s-client-go-examples&quot;&gt;https://github.com/hrishin/k8s-client-go-examples&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="kubernetes," /><category term="client-go" /><summary type="html">Background</summary></entry><entry><title type="html">Generic Linked List implementation in C</title><link href="http://localhost:4000/linked/list,/linux/2020/11/20/generic-linkedin-list-c.html" rel="alternate" type="text/html" title="Generic Linked List implementation in C" /><published>2020-11-20T22:12:12+00:00</published><updated>2020-11-20T22:12:12+00:00</updated><id>http://localhost:4000/linked/list,/linux/2020/11/20/generic-linkedin-list-c</id><content type="html" xml:base="http://localhost:4000/linked/list,/linux/2020/11/20/generic-linkedin-list-c.html">&lt;p&gt;Linked &amp;lt;- - -&amp;gt; List is one of the most widely used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data structure&lt;/code&gt; in the Linux system implementation. It holds special importance in the process scheduling.&lt;/p&gt;

&lt;p&gt;We will discuss how Linux use generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linked List&lt;/code&gt; and optimise the process
scheduling given the nature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linked List&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this post we will demistify how Doubley Circular Linked list is implemented in the
Linux Kernel and how scheduler has optimised Run Queue.&lt;/p&gt;

&lt;p&gt;[WIP]&lt;/p&gt;</content><author><name></name></author><category term="linked" /><category term="list," /><category term="linux" /><summary type="html">Linked &amp;lt;- - -&amp;gt; List is one of the most widely used data structure in the Linux system implementation. It holds special importance in the process scheduling.</summary></entry></feed>